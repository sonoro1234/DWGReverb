TITLE:: EarlyRefAtkGen
summary:: Early reflections generator
categories:: UGens>Reverbs
related:: Classes/DWGReverbC1C3, Classes/EarlyRef27Gen, Classes/GVerb

DESCRIPTION::

Generates convolution kernels for early reflections in a mono-to-ambisonic reverb. Outputs a trigger whenever the buffers change.

CLASSMETHODS::

METHOD:: kr

ARGUMENT:: bufW
ARGUMENT:: bufX
ARGUMENT:: bufY
ARGUMENT:: bufZ
Buffers to which the kernels will be written. All buffers should have the same size, and that size should be a power of 2 for use in link::Classes/PartConvT::.

ARGUMENT:: source
The x-, y-, and z-coordinates of the source audio in meters.

ARGUMENT:: receiver
The x-, y-, and z-coordinates of the listener in meters.

ARGUMENT:: roomsize
The width, height, and length of the room in meters.

ARGUMENT:: hw
Ear separation in meters.

ARGUMENT:: b
Reflection coefficient for the room's floor, walls, and ceiling.

ARGUMENT:: n
Controls the number of mirror images to model. n = 0 generates 27 mirror images, and n = 1 to 5 generates 8*(N*2+1)^3 mirror images.


EXAMPLES::

This example requires the Ambisonic Toolkit.

code::

~decoder = FoaDecoderKernel.newUHJ;

(
~nbuf = 2048*4;
SynthDef(\testatk, {
    |out = 0, len = 2000, roomsize = #[6.2,8,2.7], source = #[2,3.1,1.2], receiver = #[3,3,1.2], b = 0.74, hw = 0.4, n = 3, revl = 1, c1 = 8, c3 = 10, bypass = 0|
    var in, bufs, trig, ambi, early, sig;
    in = Impulse.ar(2);
    in = HPF.ar(LPF.ar(in, 3000), 200) * 3;
    in = LeakDC.ar(in);
    source[0] = SinOsc.kr(0.1).range(2, 4);

    bufs = { LocalBuf(~nbuf) }!4;
    trig = EarlyRefAtkGen.kr(bufs[0], bufs[1], bufs[2], bufs[3], source, receiver, roomsize, hw, b.neg, n);
    ambi = bufs.collect { |buf| Convolution2.ar(in, buf, trig, ~nbuf) };
    early = FoaDecode.ar(ambi, ~decoder);
    sig = DWGReverbC1C3.ar(Mix(early) * 0.5, len, c1, c3) * revl + early;
    sig = Select.ar(bypass, [sig, in]);
    Out.ar(out, sig);
}).add;
)

Synth(\testatk);

~decoder.free;

::